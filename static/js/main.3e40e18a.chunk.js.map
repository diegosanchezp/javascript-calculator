{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","result","expression","errorMsg","event","persist","this","setState","target","value","sym","filter","elem","eval","join","e","console","log","name","message","id","className","type","onClick","addToExpr","bind","resetExpr","evalExpr","deleteFromExpr","length","style","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3e40e18a.chunk.js","sourcesContent":["import React  from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n constructor(props) {\n    super(props);\n    this.state = {\n      result: '0',\n      expression: [],\n      errorMsg: '',\n    }\n  }\n  // Expression is a stack of string\n  addToExpr(event){\n    // Add to the extring expression\n    event.persist();\n    this.setState(state=> ({\n      expression: [...state.expression, event.target.value]\n    }));\n  }\n\n  // Todo delete from expression\n  deleteFromExpr(sym){\n    // Filter from array and update ui\n    this.setState(({expression})=>({\n      expression: expression.filter(elem => elem !== sym),\n    }));\n  }\n\n  evalExpr(){\n    // Convert expression into a number\n    this.setState(state => {\n      try{\n        return {\n          result: eval(state.expression.join('')),\n          errorMsg: ''\n        }\n      }catch(e){\n        // \"Evaluation error: don't put zeros at the beginning of the numbers\"\n        console.log(e.name);\n        return {\n          errorMsg: e.message\n        }\n      }\n    });\n  }\n\n  resetExpr(){\n    // Reset back to inital state\n    this.setState({\n      result: '0',\n      expression: [],\n      errorMsg: ''\n    });\n  }\n\n  render(){\n    return (\n      <div id=\"container\">\n        <form id=\"calculator\">\n          <div className=\"display-container\">\n            <p className=\"display\" id=\"expr-display\">\n             {this.state.expression.join('')}\n            </p>\n            <p className=\"display\" id=\"result-display\">\n              {this.state.result}\n            </p>\n          </div>\n          <input type=\"button\" id=\"zero\" value=\"0\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"one\" value=\"1\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"two\" value=\"2\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"three\" value=\"3\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"four\" value=\"4\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"five\" value=\"5\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"six\" value=\"6\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"seven\" value=\"7\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"eight\" value=\"8\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"nine\" value=\"9\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"add\" value=\"+\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"subtract\" value=\"-\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"multiply\" value=\"*\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"divide\" value=\"/\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"decimal\" value=\".\" onClick={this.addToExpr.bind(this)}/>\n          <input type=\"button\" id=\"clear\" value=\"AC\" onClick={this.resetExpr.bind(this)}/>\n          <input type=\"button\" id=\"equals\" value=\"=\" onClick={this.evalExpr.bind(this)}/>\n          <input type=\"button\" id=\"delete\" value=\"DEL\" \n            onClick={this.deleteFromExpr.bind(this, this.state.expression[this.state.expression.length -1])}/>\n        </form>\n        <p style={{color: \"red\"}}>{this.state.errorMsg}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}